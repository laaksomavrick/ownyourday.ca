name: On merge to main

# on:
#   push:
#     branches: [ main ]

on:
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY_URL: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  DOCKER_REPO_URL: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_NAME }}

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      version: ${{ steps.filter.outputs.version }}
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            version:
              - 'version'

  build-and-push-docker-image:
    needs: [changes]
    if: ${{ needs.changes.outputs.version == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout main
        uses: actions/checkout@v2

      - name: Set DOCKER_IMAGE_TAG environment variable
        run: echo "DOCKER_IMAGE_TAG=$(cat version)" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.RUNNER_AWS_ROLE_ID }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to ECR registry
        run: aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.DOCKER_REGISTRY_URL }}

      - name: Build and push container image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          tags: ${{ env.DOCKER_REPO_URL }}:${{ env.DOCKER_IMAGE_TAG }}
          push: true
          build-args: |
            "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}"

  tag-deployment-in-new-relic:
    needs: [changes, build-and-push-docker-image]
    if: ${{ needs.changes.outputs.version == 'true' }}
    runs-on: ubuntu-latest
    name: Tag deployment in New Relic
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - name: Set DOCKER_IMAGE_TAG environment variable
        run: echo "DOCKER_IMAGE_TAG=$(cat version)" >> $GITHUB_ENV
      - name: New Relic Application Deployment Marker
        uses: newrelic/deployment-marker-action@v2.3.0
        with:
          apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
          guid: ${{ secrets.NEW_RELIC_DEPLOYMENT_ENTITY_GUID }}
          version: ${{ env.DOCKER_IMAGE_TAG }}
          user: "${{ github.actor }}"

  update-infrastructure:
    needs: [changes, build-and-push-docker-image]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout main
        uses: actions/checkout@v2

      - name: Set DOCKER_IMAGE_TAG environment variable
        run: echo "DOCKER_IMAGE_TAG=$(cat version)" >> $GITHUB_ENV

      - name: Pull and deploy docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.OWNYOURDAY_DROPLET_HOST }}
          username: ${{ secrets.OWNYOURDAY_DROPLET_SSH_USERNAME }}
          key: ${{ secrets.OWNYOURDAY_DROPLET_SSH_KEY }}
          port: ${{ secrets.OWNYOURDAY_DROPLET_SSH_PORT }}
          envs: DOCKER_IMAGE_TAG,DOCKER_REPO_URL,DOCKER_REGISTRY_URL
          script: |
            cd /home/ownyourday/ownyourday.ca
            git pull
            aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY_URL
            docker pull $DOCKER_REPO_URL:$DOCKER_IMAGE_TAG
            docker tag $DOCKER_REPO_URL:$DOCKER_IMAGE_TAG ownyourday:latest
            docker-compose up -d --no-deps --build app
            docker image prune -af

# TODO: git checkout main && git pull